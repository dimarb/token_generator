#pragma version 10

// This TEAL was generated by TEALScript v0.100.2
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// emmitAndGetShares(string,string,uint64)uint64
*abi_route_emmitAndGetShares:
	// The ABI return prefix
	byte 0x151f7c75

	// q: uint64
	txna ApplicationArgs 3
	btoi

	// unitName: string
	txna ApplicationArgs 2
	extract 2 0

	// name: string
	txna ApplicationArgs 1
	extract 2 0

	// execute emmitAndGetShares(string,string,uint64)uint64
	callsub emmitAndGetShares
	itob
	concat
	log
	int 1
	return

// emmitAndGetShares(name: string, unitName: string, q: uint64): AssetID
emmitAndGetShares:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/Investment.algo.ts:38
	// sendMethodCall<typeof ShareFactory.prototype.createApplication>({
	//       clearStateProgram: ShareFactory.clearProgram(),
	//       approvalProgram: ShareFactory.approvalProgram(),
	//     })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "createApplication()void"
	itxn_field ApplicationArgs

	// contracts/Investment.algo.ts:39
	// clearStateProgram: ShareFactory.clearProgram()
	byte b64 Cg==
	itxn_field ClearStateProgram

	// contracts/Investment.algo.ts:40
	// approvalProgram: ShareFactory.approvalProgram()
	byte b64 CiACAQAxGBSBBgsxGQiNDAB4AIYAAAAAAAAAAABqAAAAAAAAAAAAAACABBUffHU2GgMXNhoCVwIANhoBVwIAiAAFFlCwIkOKAwGxgQOyEIv/siaL/rIlgQqyI4v9siIjsgGztDyJNhoCSRWBIBJENhoBF4gAAiJDigIAsYEEshCL/rIUIrISi/+yESOyAbOJIkOABLhEezY2GgCOAf/xAIAEzkt3YzYaAI4B/3wAgATrnNpPNhoAjgH/qwA=
	itxn_field ApprovalProgram

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/Investment.algo.ts:43
	// this.appId.value = this.itxn.createdApplicationID
	byte 0x6170704964 // "appId"
	itxn CreatedApplicationID
	app_global_put

	// contracts/Investment.algo.ts:46
	// sendPayment({
	//       amount: 200_000, // Pago en microAlgos
	//       receiver: this.appId.value.address,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/Investment.algo.ts:47
	// amount: 200_000
	int 200_000
	itxn_field Amount

	// contracts/Investment.algo.ts:48
	// receiver: this.appId.value.address
	byte 0x6170704964 // "appId"
	app_global_get
	app_params_get AppAddress
	pop
	itxn_field Receiver

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/Investment.algo.ts:52
	// createdAsset = sendMethodCall<typeof ShareFactory.prototype.emitShares>({
	//       applicationID: this.appId.value,
	//       methodArgs: [name, unitName, q], // Nombre y unidad del NFT
	//     })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "emitShares(string,string,uint64)uint64"
	itxn_field ApplicationArgs

	// contracts/Investment.algo.ts:53
	// applicationID: this.appId.value
	byte 0x6170704964 // "appId"
	app_global_get
	itxn_field ApplicationID

	// contracts/Investment.algo.ts:54
	// methodArgs: [name, unitName, q]
	frame_dig -1 // name: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	itxn_field ApplicationArgs
	frame_dig -2 // unitName: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	itxn_field ApplicationArgs
	frame_dig -3 // q: uint64
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	btoi
	frame_bury 0 // createdAsset: uint64

	// contracts/Investment.algo.ts:57
	// this.assetId.value = createdAsset
	byte 0x61737365744964 // "assetId"
	frame_dig 0 // createdAsset: uint64
	app_global_put

	// contracts/Investment.algo.ts:59
	// return createdAsset;
	frame_dig 0 // createdAsset: uint64

	// set the subroutine return value
	frame_bury 0
	retsub

// createHolder(address,(string,string,string,string))void
*abi_route_createHolder:
	// data: (string,string,string,string)
	txna ApplicationArgs 2

	// adress: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 1 (adress) for createHolder must be a address
	assert

	// execute createHolder(address,(string,string,string,string))void
	callsub createHolder
	int 1
	return

// createHolder(adress: Address, data: MetaDataInvestor): void
createHolder:
	proto 2 0

	// contracts/Investment.algo.ts:63
	// assert(!this.metaData(adress).exists)
	frame_dig -1 // adress: Address
	box_len
	swap
	pop
	!
	assert

	// contracts/Investment.algo.ts:64
	// this.metaData(adress).value = data
	frame_dig -1 // adress: Address
	dup
	box_del
	pop
	frame_dig -2 // data: MetaDataInvestor
	box_put
	retsub

// transferToken(address)void
*abi_route_transferToken:
	// receiver: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 0 (receiver) for transferToken must be a address
	assert

	// execute transferToken(address)void
	callsub transferToken
	int 1
	return

// transferToken(receiver: Address): void
transferToken:
	proto 1 0

	// contracts/Investment.algo.ts:68
	// assert(this.metaData(receiver).exists)
	frame_dig -1 // receiver: Address
	box_len
	swap
	pop
	assert

	// contracts/Investment.algo.ts:71
	// sendMethodCall<typeof ShareFactory.prototype.transferShares>({
	//       fee: 12_000,
	//       applicationID: this.appId.value,
	//       methodArgs: [this.assetId.value, receiver],
	//     })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "transferShares(uint64,address)void"
	itxn_field ApplicationArgs

	// contracts/Investment.algo.ts:72
	// fee: 12_000
	int 12_000
	itxn_field Fee

	// contracts/Investment.algo.ts:73
	// applicationID: this.appId.value
	byte 0x6170704964 // "appId"
	app_global_get
	itxn_field ApplicationID

	// contracts/Investment.algo.ts:74
	// methodArgs: [this.assetId.value, receiver]
	byte 0x61737365744964 // "assetId"
	app_global_get
	itob
	itxn_field ApplicationArgs
	frame_dig -1 // receiver: Address
	itxn_field ApplicationArgs

	// Submit inner transaction
	itxn_submit
	retsub

*abi_route_createApplication:
	int 1
	return

*create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	method "emmitAndGetShares(string,string,uint64)uint64"
	method "createHolder(address,(string,string,string,string))void"
	method "transferToken(address)void"
	txna ApplicationArgs 0
	match *abi_route_emmitAndGetShares *abi_route_createHolder *abi_route_transferToken

	// this contract does not implement the given ABI method for call NoOp
	err