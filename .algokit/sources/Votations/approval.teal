#pragma version 10

// This TEAL was generated by TEALScript v0.100.2
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	int 1
	return

// createApplication(): void
createApplication:
	proto 0 0

	// contracts/Votations.algo.ts:12
	// this.owner.value = this.app.creator
	byte 0x6f776e6572 // "owner"
	txna Applications 0
	app_params_get AppCreator
	pop
	app_global_put
	retsub

// reigsterCandidate(address,string,string,string,string)void
*abi_route_reigsterCandidate:
	// phone: string
	txna ApplicationArgs 5
	extract 2 0

	// email: string
	txna ApplicationArgs 4
	extract 2 0

	// lastName: string
	txna ApplicationArgs 3
	extract 2 0

	// fistName: string
	txna ApplicationArgs 2
	extract 2 0

	// address: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 4 (address) for reigsterCandidate must be a address
	assert

	// execute reigsterCandidate(address,string,string,string,string)void
	callsub reigsterCandidate
	int 1
	return

// reigsterCandidate(address: Address, fistName: string, lastName: string, email: string, phone: string): void
reigsterCandidate:
	proto 5 0

	// contracts/Votations.algo.ts:17
	// assert(this.owner.value === this.txn.sender, 'Only the owner can register a candidate')
	byte 0x6f776e6572 // "owner"
	app_global_get
	txn Sender
	==

	// Only the owner can register a candidate
	assert

	// contracts/Votations.algo.ts:18
	// assert(!this.dataCandidate(address).exists, 'The candidate is already registered')
	frame_dig -1 // address: Address
	box_len
	swap
	pop
	!

	// The candidate is already registered
	assert

	// contracts/Votations.algo.ts:19
	// this.dataCandidate(address).value = {
	//       fistName: fistName,
	//       lastName: lastName,
	//       email: email,
	//       phone: phone,
	//       votes: 0,
	//     }
	frame_dig -1 // address: Address
	dup
	box_del
	pop
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0009 // initial head offset
	frame_dig -2 // fistName: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -3 // lastName: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -4 // email: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -5 // phone: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	byte 0x00
	callsub *process_static_tuple_element
	pop // pop head offset
	concat // concat head and tail
	box_put
	retsub

// vote(address)void
*abi_route_vote:
	// candidate: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 0 (candidate) for vote must be a address
	assert

	// execute vote(address)void
	callsub vote
	int 1
	return

// vote(candidate: Address): void
vote:
	proto 1 0

	// contracts/Votations.algo.ts:30
	// assert(this.dataCandidate(candidate).exists, 'Canditae no registered')
	frame_dig -1 // candidate: Address
	box_len
	swap
	pop

	// Canditae no registered
	assert

	// contracts/Votations.algo.ts:31
	// this.dataCandidate(candidate).value.votes = this.dataCandidate(candidate).value.votes + 1
	frame_dig -1 // candidate: Address
	box_get

	// box value does not exist: this.dataCandidate(candidate).value
	assert
	store 255 // full array
	load 255 // full array
	int 8
	frame_dig -1 // candidate: Address
	box_get

	// box value does not exist: this.dataCandidate(candidate).value
	assert
	store 255 // full array
	load 255 // full array
	extract 8 1
	btoi
	int 1
	+
	itob
	dup
	bitlen
	int 8
	<=

	// this.dataCandidate(candidate).value.votes + 1 overflowed 8 bits
	assert
	extract 7 1
	replace3
	frame_dig -1 // candidate: Address
	dup
	box_del
	pop
	swap
	box_put
	retsub

// getVotes(address)(string,string,string,string,uint8)
*abi_route_getVotes:
	// The ABI return prefix
	byte 0x151f7c75

	// candidate: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 0 (candidate) for getVotes must be a address
	assert

	// execute getVotes(address)(string,string,string,string,uint8)
	callsub getVotes
	concat
	log
	int 1
	return

// getVotes(candidate: Address): CandidateInfo
getVotes:
	proto 1 1

	// contracts/Votations.algo.ts:35
	// return this.dataCandidate(candidate).value;
	frame_dig -1 // candidate: Address
	box_get

	// box value does not exist: this.dataCandidate(candidate).value
	assert
	retsub

*create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	method "reigsterCandidate(address,string,string,string,string)void"
	method "vote(address)void"
	method "getVotes(address)(string,string,string,string,uint8)"
	txna ApplicationArgs 0
	match *abi_route_reigsterCandidate *abi_route_vote *abi_route_getVotes

	// this contract does not implement the given ABI method for call NoOp
	err

*process_static_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -1 // element
	concat
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub

*process_dynamic_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -2 // head offset
	concat
	frame_bury -4 // tuple head
	frame_dig -1 // element
	dup
	len
	frame_dig -2 // head offset
	btoi
	+
	itob
	extract 6 2
	frame_bury -2 // head offset
	frame_dig -3 // tuple tail
	swap
	concat
	frame_bury -3 // tuple tail
	frame_dig -4 // tuple head
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub