{
  "hints": {
    "emmitAndGetShares(string,string,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createHolder(address,(string,string,string,string))void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "transferToken(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "assetId": {
          "type": "uint64",
          "key": "assetId"
        },
        "appId": {
          "type": "uint64",
          "key": "appId"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 2
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "InvestmentCaller",
    "desc": "",
    "methods": [
      {
        "name": "emmitAndGetShares",
        "args": [
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "unitName",
            "type": "string"
          },
          {
            "name": "q",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "createHolder",
        "args": [
          {
            "name": "adress",
            "type": "address"
          },
          {
            "name": "data",
            "type": "(string,string,string,string)"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "transferToken",
        "args": [
          {
            "name": "receiver",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}