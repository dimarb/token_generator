{
  "last-round": 15,
  "txn-groups": [
    {
      "txn-results": [
        {
          "txn-result": {
            "pool-error": "",
            "txn": {
              "txn": {
                "apaa": [
                  "Rd7Y4A=="
                ],
                "apid": 1014,
                "fee": 1000,
                "fv": 15,
                "gen": "dockernet-v1",
                "gh": "z5cwiLHmjNo3DWB5fHNSgZxcqm5AWSGqKfYUrn9899s=",
                "lv": 1015,
                "snd": "I1nvevVqkNNTsHXXzAkOs8JlYevYLpidNVajkgA7TVg=",
                "type": "appl"
              }
            }
          },
          "app-budget-consumed": 29,
          "exec-trace": {
            "approval-program-hash": "54Xhan7h7OQYXxsSOgPD5hLdXHCp00Sqvyi7g0mg9GI=",
            "approval-program-trace": [
              {
                "pc": 1
              },
              {
                "pc": 6
              },
              {
                "pc": 13,
                "stack-additions": [
                  {
                    "type": 2,
                    "uint": 1014
                  }
                ]
              },
              {
                "pc": 15,
                "stack-additions": [
                  {
                    "type": 2
                  }
                ],
                "stack-pop-count": 1
              },
              {
                "pc": 16,
                "stack-additions": [
                  {
                    "type": 2,
                    "uint": 6
                  }
                ]
              },
              {
                "pc": 17,
                "stack-additions": [
                  {
                    "type": 2
                  }
                ],
                "stack-pop-count": 2
              },
              {
                "pc": 18,
                "stack-additions": [
                  {
                    "type": 2
                  }
                ]
              },
              {
                "pc": 20,
                "stack-additions": [
                  {
                    "type": 2
                  }
                ],
                "stack-pop-count": 2
              },
              {
                "pc": 21,
                "stack-pop-count": 1
              },
              {
                "pc": 408,
                "stack-additions": [
                  {
                    "type": 1,
                    "bytes": "Rd7Y4A=="
                  }
                ]
              },
              {
                "pc": 414,
                "stack-additions": [
                  {
                    "type": 1,
                    "bytes": "Rd7Y4A=="
                  }
                ]
              },
              {
                "pc": 417,
                "stack-pop-count": 2
              },
              {
                "pc": 48,
                "stack-additions": [
                  {
                    "type": 1,
                    "bytes": "FR98dQ=="
                  }
                ]
              },
              {
                "pc": 54
              },
              {
                "pc": 62
              },
              {
                "pc": 65,
                "stack-additions": [
                  {
                    "type": 1
                  }
                ]
              },
              {
                "pc": 67,
                "stack-additions": [
                  {
                    "type": 1
                  },
                  {
                    "type": 1
                  }
                ],
                "stack-pop-count": 1
              },
              {
                "pc": 68
              },
              {
                "pc": 69,
                "stack-additions": [
                  {
                    "type": 2,
                    "uint": 6
                  }
                ]
              },
              {
                "pc": 70,
                "stack-pop-count": 1
              },
              {
                "pc": 72,
                "stack-additions": [
                  {
                    "type": 1,
                    "bytes": "uER7Ng=="
                  }
                ]
              },
              {
                "pc": 73,
                "stack-pop-count": 1
              },
              {
                "pc": 75,
                "stack-additions": [
                  {
                    "type": 1,
                    "bytes": "Cg=="
                  }
                ]
              },
              {
                "pc": 78,
                "stack-pop-count": 1
              },
              {
                "pc": 80,
                "stack-additions": [
                  {
                    "type": 1,
                    "bytes": "CiACAQAxGBSBBgsxGQiNDABvAAAAAAAAAAAAAABhAAAAAAAAAAAAAACABBUffHU2GgJXAgA2GgFXAgCIAAUWULAiQ4oCAbGBA7IQi/+yJov+siUisiIjsgGztDyJNhoCSRWBIBJENhoBF4gAAiJDigIAsYEEshCL/rIUIrISi/+yESOyAbOJIkOABLhEezY2GgCOAf/xAIAE0gJMc4AEx+JgrzYaAI4C/33/sQA="
                  }
                ]
              },
              {
                "pc": 256,
                "stack-pop-count": 1
              },
              {
                "pc": 258,
                "stack-additions": [
                  {
                    "type": 2
                  }
                ]
              },
              {
                "pc": 259,
                "stack-pop-count": 1
              },
              {
                "pc": 261
              }
            ]
          }
        }
      ],
      "app-budget-added": 700,
      "app-budget-consumed": 29,
      "failed-at": [
        0
      ],
      "failure-message": "transaction XCNXPDC6DZ3URV6OOLGIZMUKSB2JRNQG5LBME5Z2VYH3RVPWQ4RA: logic eval error: fee too small []transactions.SignedTxnWithAD{transactions.SignedTxnWithAD{_struct:struct {}{}, SignedTxn:transactions.SignedTxn{_struct:struct {}{}, Sig:crypto.Signature{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Msig:crypto.MultisigSig{_struct:struct {}{}, Version:0x0, Threshold:0x0, Subsigs:[]crypto.MultisigSubsig(nil)}, Lsig:transactions.LogicSig{_struct:struct {}{}, Logic:[]uint8(nil), Sig:crypto.Signature{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Msig:crypto.MultisigSig{_struct:struct {}{}, Version:0x0, Threshold:0x0, Subsigs:[]crypto.MultisigSubsig(nil)}, Args:[][]uint8(nil)}, Txn:transactions.Transaction{_struct:struct {}{}, Type:\"appl\", Header:transactions.Header{_struct:struct {}{}, Sender:basics.Address{0xd1, 0x30, 0xef, 0xbd, 0x59, 0x5e, 0x1a, 0xb4, 0x86, 0x9f, 0x7f, 0x2c, 0x7f, 0x28, 0xa1, 0xfa, 0x38, 0x92, 0x52, 0xdf, 0x61, 0x54, 0x35, 0xf7, 0x72, 0x64, 0xc8, 0x2a, 0x78, 0x0, 0xa7, 0x22}, Fee:basics.MicroAlgos{Raw:0x0}, FirstValid:0xf, LastValid:0x3f7, Note:[]uint8(nil), GenesisID:\"\", GenesisHash:crypto.Digest{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Group:crypto.Digest{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Lease:[32]uint8{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, RekeyTo:basics.Address{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}}, KeyregTxnFields:transactions.KeyregTxnFields{_struct:struct {}{}, VotePK:crypto.OneTimeSignatureVerifier{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, SelectionPK:crypto.VrfPubkey{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, StateProofPK:merklesignature.Commitment{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, VoteFirst:0x0, VoteLast:0x0, VoteKeyDilution:0x0, Nonparticipation:false}, PaymentTxnFields:transactions.PaymentTxnFields{_struct:struct {}{}, Receiver:basics.Address{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Amount:basics.MicroAlgos{Raw:0x0}, CloseRemainderTo:basics.Address{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}}, AssetConfigTxnFields:transactions.AssetConfigTxnFields{_struct:struct {}{}, ConfigAsset:0x0, AssetParams:basics.AssetParams{_struct:struct {}{}, Total:0x0, Decimals:0x0, DefaultFrozen:false, UnitName:\"\", AssetName:\"\", URL:\"\", MetadataHash:[32]uint8{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Manager:basics.Address{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Reserve:basics.Address{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Freeze:basics.Address{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Clawback:basics.Address{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}}}, AssetTransferTxnFields:transactions.AssetTransferTxnFields{_struct:struct {}{}, XferAsset:0x0, AssetAmount:0x0, AssetSender:basics.Address{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, AssetReceiver:basics.Address{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, AssetCloseTo:basics.Address{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}}, AssetFreezeTxnFields:transactions.AssetFreezeTxnFields{_struct:struct {}{}, FreezeAccount:basics.Address{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, FreezeAsset:0x0, AssetFrozen:false}, ApplicationCallTxnFields:transactions.ApplicationCallTxnFields{_struct:struct {}{}, ApplicationID:0x0, OnCompletion:0x0, ApplicationArgs:[][]uint8{[]uint8{0xb8, 0x44, 0x7b, 0x36}}, Accounts:[]basics.Address(nil), ForeignApps:[]basics.AppIndex(nil), Boxes:[]transactions.BoxRef(nil), ForeignAssets:[]basics.AssetIndex(nil), LocalStateSchema:basics.StateSchema{_struct:struct {}{}, NumUint:0x0, NumByteSlice:0x0}, GlobalStateSchema:basics.StateSchema{_struct:struct {}{}, NumUint:0x0, NumByteSlice:0x0}, ApprovalProgram:[]uint8{0xa, 0x20, 0x2, 0x1, 0x0, 0x31, 0x18, 0x14, 0x81, 0x6, 0xb, 0x31, 0x19, 0x8, 0x8d, 0xc, 0x0, 0x6f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x4, 0x15, 0x1f, 0x7c, 0x75, 0x36, 0x1a, 0x2, 0x57, 0x2, 0x0, 0x36, 0x1a, 0x1, 0x57, 0x2, 0x0, 0x88, 0x0, 0x5, 0x16, 0x50, 0xb0, 0x22, 0x43, 0x8a, 0x2, 0x1, 0xb1, 0x81, 0x3, 0xb2, 0x10, 0x8b, 0xff, 0xb2, 0x26, 0x8b, 0xfe, 0xb2, 0x25, 0x22, 0xb2, 0x22, 0x23, 0xb2, 0x1, 0xb3, 0xb4, 0x3c, 0x89, 0x36, 0x1a, 0x2, 0x49, 0x15, 0x81, 0x20, 0x12, 0x44, 0x36, 0x1a, 0x1, 0x17, 0x88, 0x0, 0x2, 0x22, 0x43, 0x8a, 0x2, 0x0, 0xb1, 0x81, 0x4, 0xb2, 0x10, 0x8b, 0xfe, 0xb2, 0x14, 0x22, 0xb2, 0x12, 0x8b, 0xff, 0xb2, 0x11, 0x23, 0xb2, 0x1, 0xb3, 0x89, 0x22, 0x43, 0x80, 0x4, 0xb8, 0x44, 0x7b, 0x36, 0x36, 0x1a, 0x0, 0x8e, 0x1, 0xff, 0xf1, 0x0, 0x80, 0x4, 0xd2, 0x2, 0x4c, 0x73, 0x80, 0x4, 0xc7, 0xe2, 0x60, 0xaf, 0x36, 0x1a, 0x0, 0x8e, 0x2, 0xff, 0x7d, 0xff, 0xb1, 0x0}, ClearStateProgram:[]uint8{0xa}, ExtraProgramPages:0x0}, StateProofTxnFields:transactions.StateProofTxnFields{_struct:struct {}{}, StateProofType:0x0, StateProof:stateproof.StateProof{_struct:struct {}{}, SigCommit:crypto.GenericDigest(nil), SignedWeight:0x0, SigProofs:merklearray.Proof{_struct:struct {}{}, Path:[]crypto.GenericDigest(nil), HashFactory:crypto.HashFactory{_struct:struct {}{}, HashType:0x0}, TreeDepth:0x0}, PartProofs:merklearray.Proof{_struct:struct {}{}, Path:[]crypto.GenericDigest(nil), HashFactory:crypto.HashFactory{_struct:struct {}{}, HashType:0x0}, TreeDepth:0x0}, MerkleSignatureSaltVersion:0x0, Reveals:map[uint64]stateproof.Reveal(nil), PositionsToReveal:[]uint64(nil)}, Message:stateproofmsg.Message{_struct:struct {}{}, BlockHeadersCommitment:[]uint8(nil), VotersCommitment:[]uint8(nil), LnProvenWeight:0x0, FirstAttestedRound:0x0, LastAttestedRound:0x0}}}, AuthAddr:basics.Address{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}}, ApplyData:transactions.ApplyData{_struct:struct {}{}, ClosingAmount:basics.MicroAlgos{Raw:0x0}, AssetClosingAmount:0x0, SenderRewards:basics.MicroAlgos{Raw:0x0}, ReceiverRewards:basics.MicroAlgos{Raw:0x0}, CloseRewards:basics.MicroAlgos{Raw:0x0}, EvalDelta:transactions.EvalDelta{_struct:struct {}{}, GlobalDelta:basics.StateDelta(nil), LocalDeltas:map[uint64]basics.StateDelta(nil), SharedAccts:[]basics.Address(nil), Logs:[]string(nil), InnerTxns:[]transactions.SignedTxnWithAD(nil)}, ConfigAsset:0x0, ApplicationID:0x0}}}. Details: app=1014, pc=261, opcodes=intc_0 // 0; itxn_field Fee; itxn_submit"
    }
  ],
  "version": 2,
  "eval-overrides": {
    "allow-empty-signatures": true,
    "max-log-calls": 2048,
    "max-log-size": 65536
  },
  "exec-trace-config": {
    "enable": true,
    "scratch-change": true,
    "stack-change": true,
    "state-change": true
  },
  "initial-states": {}
}